
% Auto-generated by LidarCameraCalibrator app on 26-Dec-2021
%-------------------------------------------------------
%

%% Image files
imageFilePaths = { '/home/jc/Documents/stereo-lidar-calibration/exclude_dir/lcc/mydata/left_images/0001.png'; ...
    '/home/jc/Documents/stereo-lidar-calibration/exclude_dir/lcc/mydata/left_images/0002.png'; ...
    '/home/jc/Documents/stereo-lidar-calibration/exclude_dir/lcc/mydata/left_images/0003.png'; ...
    '/home/jc/Documents/stereo-lidar-calibration/exclude_dir/lcc/mydata/left_images/0004.png'; ...
    '/home/jc/Documents/stereo-lidar-calibration/exclude_dir/lcc/mydata/left_images/0005.png'; ...
    '/home/jc/Documents/stereo-lidar-calibration/exclude_dir/lcc/mydata/left_images/0006.png'; ...
    '/home/jc/Documents/stereo-lidar-calibration/exclude_dir/lcc/mydata/left_images/0007.png'; ...
    '/home/jc/Documents/stereo-lidar-calibration/exclude_dir/lcc/mydata/left_images/0008.png' };

%% Point cloud files
ptcFilePaths = { '/home/jc/Documents/stereo-lidar-calibration/exclude_dir/lcc/mydata/pointclouds/0001.pcd'; ...
    '/home/jc/Documents/stereo-lidar-calibration/exclude_dir/lcc/mydata/pointclouds/0002.pcd'; ...
    '/home/jc/Documents/stereo-lidar-calibration/exclude_dir/lcc/mydata/pointclouds/0003.pcd'; ...
    '/home/jc/Documents/stereo-lidar-calibration/exclude_dir/lcc/mydata/pointclouds/0004.pcd'; ...
    '/home/jc/Documents/stereo-lidar-calibration/exclude_dir/lcc/mydata/pointclouds/0005.pcd'; ...
    '/home/jc/Documents/stereo-lidar-calibration/exclude_dir/lcc/mydata/pointclouds/0006.pcd'; ...
    '/home/jc/Documents/stereo-lidar-calibration/exclude_dir/lcc/mydata/pointclouds/0007.pcd'; ...
    '/home/jc/Documents/stereo-lidar-calibration/exclude_dir/lcc/mydata/pointclouds/0008.pcd' };

%% Load initial parameters
squareSize = 200;
padding = [0 0 0 0];

%% Compute camera intrinsics
% Detect calibration pattern
[imagePoints, boardSize] = detectCheckerboardPoints(imageFilePaths);
% Generate world coordinates of the corners of the squares
worldPoints = generateCheckerboardPoints(boardSize, squareSize);
% Calibrate the camera
I = imread(imageFilePaths{1});
imageSize = [size(I, 1), size(I, 2)];
params = estimateCameraParameters(imagePoints, worldPoints, 'ImageSize', imageSize);
intrinsics = params.Intrinsics;

%% Estimate 3D checkerboard points from images
minCornerMetric = 0.150000;
[imageCorners3d, planeDimension, dataUsed] = estimateCheckerboardCorners3d(imageFilePaths, intrinsics, squareSize, 'Padding', padding, 'MinCornerMetric', minCornerMetric);

% Filter images and point clouds that are not used
imageFilePaths = imageFilePaths(dataUsed);
ptcFilePaths = ptcFilePaths(dataUsed);

%% Detect plane segment from point clouds
minDistance = 0.500000;
roi = [0 10 -5 5 -2 2];
dimTol = 0.050000;
removeGround = true;
rng('default');
detectionResults = struct();
k = 1;
for i = 1:numel(ptcFilePaths)
    [detectionResults(i).lidarCheckerboardPlane, detectionResults(i).ptCloudUsed] = detectRectangularPlanePoints(ptcFilePaths{i}, planeDimension, 'RemoveGround', removeGround, 'ROI', roi, 'DimensionTolerance', dimTol, 'MinDistance', minDistance);
    if detectionResults(i).ptCloudUsed
        lidarCheckerboardPlanes(k) = detectionResults(i).lidarCheckerboardPlane;
        k = k + 1;
    end
end

% Filter images and point clouds that are not used
imageFilePaths = imageFilePaths([detectionResults.ptCloudUsed]);
ptcFilePaths = ptcFilePaths([detectionResults.ptCloudUsed]);

% Filter image corners that are not used
imageCorners3d = imageCorners3d(:, :, [detectionResults.ptCloudUsed]);


%% Estimate transformation between lidar point cloud and image 3-D corners
initialTransform = rigid3d( ...
    [1 0 0;0 1 0;0 0 1], ...
    [0 0 0]);
[tform, errors] = estimateLidarCameraTransform(lidarCheckerboardPlanes, imageCorners3d, 'CameraIntrinsic', intrinsics, 'InitialTransform', initialTransform, 'verbose', true);

%% Project lidar points to an image
figure
im = imread(imageFilePaths{1});
im = undistortImage(im, intrinsics);
imPts = projectLidarPointsOnImage(lidarCheckerboardPlanes(1),intrinsics, tform);
im = insertMarker(im ,imPts,'*','color','blue','size', 3);
imshow(im);

%% Plot the errors
figure
subplot(1,3,1);
h1 = bar(errors.TranslationError, 0.4);
subplot(1,3,2);
h2 = bar(errors.RotationError, 0.4);
subplot(1,3,3);
h3 = bar(errors.ReprojectionError, 0.4);
t1 = title(h1.Parent, 'Translation Errors', 'Units', 'normalized');
t2 = title(h2.Parent, 'Rotation Errors', 'Units', 'normalized');
t3 = title(h3.Parent, 'Reprojection Errors', 'Units', 'normalized');
set(t1, 'Position', get(t1, 'Position')+[0 0.04 0]);
set(t2, 'Position', get(t2, 'Position')+[0 0.04 0]);
set(t3, 'Position', get(t3, 'Position')+[0 0.04 0]);
xlabel(h1.Parent, 'Image - Point Cloud Pairs');
xlabel(h2.Parent, 'Image - Point Cloud Pairs');
xlabel(h3.Parent, 'Image - Point Cloud Pairs');
ylabel(h1.Parent, 'Error (meters)');
ylabel(h2.Parent, 'Error (degrees)');
ylabel(h3.Parent, 'Error (pixels)');